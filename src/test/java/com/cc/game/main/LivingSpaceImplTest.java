package com.cc.game.main;

import org.junit.Assert;
import org.junit.Test;

import com.cc.game.main.LivingSpaceImpl;
import com.cc.game.util.GameOfLifeEnum;
import com.cc.game.util.InvalidInputException;

/**
 * @author Silas
 *
 */

public class LivingSpaceImplTest {
	
	@Test
	public void testLivingSpaceCreationWithAutoGeneratedInputMatrix() {
		LivingSpaceImpl gameOfLife = new LivingSpaceImpl();
		char[][] livingSpace = gameOfLife.getLivingSpace();
		Assert.assertNotNull(livingSpace);
	}

	
	@Test
	public void testLivingSpaceCreationWithAutoGeneratedInputMatrixWithMatrixSize() throws InvalidInputException {
		LivingSpaceImpl gameOfLife = new LivingSpaceImpl(5,4);
		char[][] livingSpace = gameOfLife.getLivingSpace();
		
		Assert.assertNotNull(livingSpace);
		
		gameOfLife = new LivingSpaceImpl(3,3);
		livingSpace = gameOfLife.getLivingSpace();
		
		Assert.assertNotNull(livingSpace);
	}

	@Test
	public void testLivingSpaceCreationWithBlockPatternInputMatrix() {
		
		char[] rowOne = GameOfLifeEnum.BLOCK_PATTERN.getTextValue().toCharArray();
		char[] rowTwo = GameOfLifeEnum.BLOCK_PATTERN.getTextValue().toCharArray();
		char[][] inputLivingSpace = {rowOne,rowTwo};
		
		LivingSpaceImpl gameOfLife = new LivingSpaceImpl(inputLivingSpace);
		
		Assert.assertArrayEquals(inputLivingSpace, gameOfLife.getLivingSpace());

		char[] rowOneNewLife = GameOfLifeEnum.BLOCK_PATTERN.getTextValue().toCharArray();
		char[] rowTwoNewLife = GameOfLifeEnum.BLOCK_PATTERN.getTextValue().toCharArray();
		char[][] newLifeLivingSpace = {rowOneNewLife,rowTwoNewLife};
		
		gameOfLife.nextLife(inputLivingSpace);
		
		Assert.assertArrayEquals(newLifeLivingSpace, gameOfLife.getLivingSpace());

	}

	@Test
	public void testLivingSpaceCreationWithBoatPatternInputMatrix() {
		
		char[] rowOne = GameOfLifeEnum.BOAT_PATTERN_ROW_ONE.getTextValue().toCharArray();
		char[] rowTwo = GameOfLifeEnum.BOAT_PATTERN_ROW_TWO.getTextValue().toCharArray();
		char[] rowThree = GameOfLifeEnum.BOAT_PATTERN_ROW_THREE.getTextValue().toCharArray();
		char[][] inputLivingSpace = {rowOne,rowTwo,rowThree};
		
		LivingSpaceImpl gameOfLife = new LivingSpaceImpl(inputLivingSpace);
		
		Assert.assertArrayEquals(inputLivingSpace, gameOfLife.getLivingSpace());

		char[] rowOneNewLife = GameOfLifeEnum.BOAT_PATTERN_ROW_ONE.getTextValue().toCharArray();
		char[] rowTwoNewLife = GameOfLifeEnum.BOAT_PATTERN_ROW_TWO.getTextValue().toCharArray();
		char[] rowThreeNewLife = GameOfLifeEnum.BOAT_PATTERN_ROW_THREE.getTextValue().toCharArray();
		char[][] newLifeLivingSpace = {rowOneNewLife,rowTwoNewLife,rowThreeNewLife};
		
		gameOfLife.nextLife(inputLivingSpace);
		
		Assert.assertArrayEquals(newLifeLivingSpace, gameOfLife.getLivingSpace());

	}

	@Test
	public void testLivingSpaceCreationWithBlinkerPatternInputMatrix() {
		
		char[] rowOne = GameOfLifeEnum.BLINKER_PATTERN_ROW_ONE.getTextValue().toCharArray();
		char[] rowTwo = GameOfLifeEnum.BLINKER_PATTERN_ROW_TWO.getTextValue().toCharArray();
		char[] rowThree = GameOfLifeEnum.BLINKER_PATTERN_ROW_THREE.getTextValue().toCharArray();
		char[][] inputLivingSpace = {rowOne,rowTwo,rowThree};
		
		LivingSpaceImpl gameOfLife = new LivingSpaceImpl(inputLivingSpace);
		
		Assert.assertArrayEquals(inputLivingSpace, gameOfLife.getLivingSpace());

		char[] rowOneNewLife = GameOfLifeEnum.BLINKER_PATTERN_RESULT_ROW_ONE.getTextValue().toCharArray();
		char[] rowTwoNewLife = GameOfLifeEnum.BLINKER_PATTERN_RESULT_ROW_TWO.getTextValue().toCharArray();
		char[] rowThreeNewLife = GameOfLifeEnum.BLINKER_PATTERN_RESULT_ROW_THREE.getTextValue().toCharArray();
		char[][] newLifeLivingSpace = {rowOneNewLife,rowTwoNewLife,rowThreeNewLife};
		
		gameOfLife.nextLife(inputLivingSpace);
		
		Assert.assertArrayEquals(newLifeLivingSpace, gameOfLife.getLivingSpace());

	}

	@Test
	public void testLivingSpaceCreationWithToadPatternInputMatrix() {
		
		char[] rowOne = GameOfLifeEnum.TOAD_PATTERN_ROW_ONE.getTextValue().toCharArray();
		char[] rowTwo = GameOfLifeEnum.TOAD_PATTERN_ROW_TWO.getTextValue().toCharArray();
		char[] rowThree = GameOfLifeEnum.TOAD_PATTERN_ROW_THREE.getTextValue().toCharArray();
		char[] rowFour = GameOfLifeEnum.TOAD_PATTERN_ROW_FOUR.getTextValue().toCharArray();
		char[][] inputLivingSpace = {rowOne,rowTwo,rowThree,rowFour};
		
		LivingSpaceImpl gameOfLife = new LivingSpaceImpl(inputLivingSpace);
		
		Assert.assertArrayEquals(inputLivingSpace, gameOfLife.getLivingSpace());

		char[] rowOneNewLife = GameOfLifeEnum.TOAD_PATTERN_RESULT_ROW_ONE.getTextValue().toCharArray();
		char[] rowTwoNewLife = GameOfLifeEnum.TOAD_PATTERN_RESULT_ROW_TWO.getTextValue().toCharArray();
		char[] rowThreeNewLife = GameOfLifeEnum.TOAD_PATTERN_RESULT_ROW_THREE.getTextValue().toCharArray();
		char[] rowFourNewLife = GameOfLifeEnum.TOAD_PATTERN_RESULT_ROW_FOUR.getTextValue().toCharArray();
		char[][] newLifeLivingSpace = {rowOneNewLife,rowTwoNewLife,rowThreeNewLife,rowFourNewLife};
		
		gameOfLife.nextLife(inputLivingSpace);
		
		Assert.assertArrayEquals(newLifeLivingSpace, gameOfLife.getLivingSpace());

	}

	@Test(expected = ArrayIndexOutOfBoundsException.class)
	public void testLivingSpaceCreationWithBlockPatternInvalidInputMatrix() {
		
		char[] rowOne = GameOfLifeEnum.TOAD_PATTERN_ROW_ONE.getTextValue().toCharArray();
		char[] rowTwo = GameOfLifeEnum.BLOCK_PATTERN.getTextValue().toCharArray();
		char[][] inputLivingSpace = {rowOne,rowTwo};
		
		LivingSpaceImpl gameOfLife = new LivingSpaceImpl(inputLivingSpace);
		
		Assert.assertArrayEquals(inputLivingSpace, gameOfLife.getLivingSpace());

		char[] rowOneNewLife = GameOfLifeEnum.BLOCK_PATTERN.getTextValue().toCharArray();
		char[] rowTwoNewLife = GameOfLifeEnum.BOAT_PATTERN_ROW_THREE.getTextValue().toCharArray();
		char[][] newLifeLivingSpace = {rowOneNewLife,rowTwoNewLife};
		
		gameOfLife.nextLife(inputLivingSpace);
		
		Assert.assertNotEquals(newLifeLivingSpace, gameOfLife.getLivingSpace());

	}

	@Test
	public void testLivingSpaceCreationWithBlockPatternInvalidInputMatrixSize() {
		
		char[] rowOne = GameOfLifeEnum.BLOCK_PATTERN.getTextValue().toCharArray();
		char[] rowTwo = GameOfLifeEnum.BLOCK_PATTERN.getTextValue().toCharArray();
		char[][] inputLivingSpace = {rowOne,rowTwo};
		
		LivingSpaceImpl gameOfLife = new LivingSpaceImpl(inputLivingSpace);
		
		Assert.assertArrayEquals(inputLivingSpace, gameOfLife.getLivingSpace());

		char[] rowOneNewLife = GameOfLifeEnum.BLOCK_PATTERN.getTextValue().toCharArray();
		char[] rowTwoNewLife = GameOfLifeEnum.BOAT_PATTERN_ROW_THREE.getTextValue().toCharArray();
		char[][] newLifeLivingSpace = {rowOneNewLife,rowTwoNewLife};
		
		gameOfLife.nextLife(inputLivingSpace);
		
		Assert.assertNotEquals(newLifeLivingSpace, gameOfLife.getLivingSpace());

	}

}
