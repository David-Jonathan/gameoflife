package com.cc.game.main;

import org.junit.Assert;
import org.junit.Test;

import com.cc.game.main.LivingSpace;

/**
 * @author Silas
 *
 */

public class LivingSpaceTest {
	
	@Test
	public void testLivingSpaceCreationWithAutoGeneratedInputMatrix() {
		LivingSpace gameOfLife = new LivingSpace();
		char[][] livingSpace = gameOfLife.getLivingSpace();
		
		Assert.assertNotNull(livingSpace);
	}

	
	@Test
	public void testLivingSpaceCreationWithAutoGeneratedInputMatrixWithMatrixSize() {
		LivingSpace gameOfLife = new LivingSpace(5,4);
		char[][] livingSpace = gameOfLife.getLivingSpace();
		
		Assert.assertNotNull(livingSpace);
		
		gameOfLife = new LivingSpace(3,3);
		livingSpace = gameOfLife.getLivingSpace();
		
		Assert.assertNotNull(livingSpace);
	}

	@Test
	public void testLivingSpaceCreationWithBlockPatternInputMatrix() {
		
		char[] rowOne = "XX".toCharArray();
		char[] rowTwo = "XX".toCharArray();
		char[][] inputLivingSpace = {rowOne,rowTwo};
		
		LivingSpace gameOfLife = new LivingSpace(2,2,inputLivingSpace);
		
		Assert.assertArrayEquals(inputLivingSpace, gameOfLife.getLivingSpace());

		char[] rowOneNewLife = "XX".toCharArray();
		char[] rowTwoNewLife = "XX".toCharArray();
		char[][] newLifeLivingSpace = {rowOneNewLife,rowTwoNewLife};
		
		gameOfLife.nextLife(inputLivingSpace);
		
		Assert.assertArrayEquals(newLifeLivingSpace, gameOfLife.getLivingSpace());

	}

	@Test
	public void testLivingSpaceCreationWithBoatPatternInputMatrix() {
		
		char[] rowOne = "XX-".toCharArray();
		char[] rowTwo = "X-X".toCharArray();
		char[] rowThree = "-X-".toCharArray();
		char[][] inputLivingSpace = {rowOne,rowTwo,rowThree};
		
		LivingSpace gameOfLife = new LivingSpace(3,3,inputLivingSpace);
		
		Assert.assertArrayEquals(inputLivingSpace, gameOfLife.getLivingSpace());

		char[] rowOneNewLife = "XX-".toCharArray();
		char[] rowTwoNewLife = "X-X".toCharArray();
		char[] rowThreeNewLife = "-X-".toCharArray();
		char[][] newLifeLivingSpace = {rowOneNewLife,rowTwoNewLife,rowThreeNewLife};
		
		gameOfLife.nextLife(inputLivingSpace);
		
		Assert.assertArrayEquals(newLifeLivingSpace, gameOfLife.getLivingSpace());

	}

	@Test
	public void testLivingSpaceCreationWithBlinkerPatternInputMatrix() {
		
		char[] rowOne = "-X-".toCharArray();
		char[] rowTwo = "-X-".toCharArray();
		char[] rowThree = "-X-".toCharArray();
		char[][] inputLivingSpace = {rowOne,rowTwo,rowThree};
		
		LivingSpace gameOfLife = new LivingSpace(3,3,inputLivingSpace);
		
		Assert.assertArrayEquals(inputLivingSpace, gameOfLife.getLivingSpace());

		char[] rowOneNewLife = "---".toCharArray();
		char[] rowTwoNewLife = "XXX".toCharArray();
		char[] rowThreeNewLife = "---".toCharArray();
		char[][] newLifeLivingSpace = {rowOneNewLife,rowTwoNewLife,rowThreeNewLife};
		
		gameOfLife.nextLife(inputLivingSpace);
		
		Assert.assertArrayEquals(newLifeLivingSpace, gameOfLife.getLivingSpace());

	}

	@Test
	public void testLivingSpaceCreationWithToadPatternInputMatrix() {
		
		char[] rowOne = "----".toCharArray();
		char[] rowTwo = "-XXX".toCharArray();
		char[] rowThree = "XXX-".toCharArray();
		char[] rowFour = "----".toCharArray();
		char[][] inputLivingSpace = {rowOne,rowTwo,rowThree,rowFour};
		
		LivingSpace gameOfLife = new LivingSpace(4,4,inputLivingSpace);
		
		Assert.assertArrayEquals(inputLivingSpace, gameOfLife.getLivingSpace());

		char[] rowOneNewLife = "--X-".toCharArray();
		char[] rowTwoNewLife = "X--X".toCharArray();
		char[] rowThreeNewLife = "X--X".toCharArray();
		char[] rowFourNewLife = "-X--".toCharArray();
		char[][] newLifeLivingSpace = {rowOneNewLife,rowTwoNewLife,rowThreeNewLife,rowFourNewLife};
		
		gameOfLife.nextLife(inputLivingSpace);
		
		Assert.assertArrayEquals(newLifeLivingSpace, gameOfLife.getLivingSpace());

	}
	
}
